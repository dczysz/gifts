// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id @default(uuid())
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  username      String     @unique
  passwordHash  String
  createdEvents Event[]    @relation("creator")
  attendee      Attendee[]
}

model Event {
  id          String     @id @default(uuid())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  code        String     @unique
  name        String
  description String
  date        DateTime
  location    String?
  creator     User       @relation("creator", fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId   String
  listItems   ListItem[]
  attendees   Attendee[]
  comments    Comment[]
}

model Attendee {
  id            String     @id @default(uuid())
  userId        String
  user          User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  eventId       String
  event         Event      @relation(fields: [eventId], references: [id], onDelete: Cascade)
  nickname      String
  avatar        String?
  role          Role
  ownedItems    ListItem[] @relation("owner")
  ownedComments Comment[]  @relation("owner")
  listComments  Comment[]  @relation("listOwner")
  givingItems   ListItem[]
}

enum Role {
  Admin
  Organizer
  Guest
}

model ListItem {
  id          String     @id @default(uuid())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  owner       Attendee   @relation("owner", fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId     String
  event       Event      @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId     String
  quantity    Int
  name        String
  description String
  link        String?
  givers      Attendee[]
}

model Comment {
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  // Who wrote it
  owner       Attendee  @relation("owner", fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId     String
  // Which event is it for
  event       Event     @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId     String
  // Whose list it is for, or none for top level event comment
  listOwner   Attendee? @relation("listOwner", fields: [listOwnerId], references: [id], onDelete: Cascade)
  listOwnerId String?
  text        String
}

model ViewedComment {
  /// The user who viewed the comment
  userId     String
  /// The event the comment belongs to
  eventId    String
  /// The attendee whose list the comment belongs to, or empty string "" for top event comment
  attendeeId String
  /// Last time this user viewed the comments
  timestamp  DateTime

  @@id([userId, eventId, attendeeId])
}
